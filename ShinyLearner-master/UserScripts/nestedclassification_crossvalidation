#!/bin/bash

set -euo pipefail

source scripts/shared_functions
source scripts/first_param_check

dataFiles="$(python3 scripts/ParseArgs.py --data TRUE "$@")"
description="$(python3 scripts/ParseArgs.py --description TRUE $@)"
numIterations="$(python3 scripts/ParseArgs.py --iterations TRUE $@)"
outerNumFolds="$(python3 scripts/ParseArgs.py --outer-folds TRUE $@)"
innerNumFolds="$(python3 scripts/ParseArgs.py --inner-folds TRUE $@)"
classifAlgos="$(python3 scripts/ParseArgs.py --classif-algo TRUE "$@")"
verbose="$(python3 scripts/ParseArgs.py --verbose FALSE false $@)"
ohe="$(python3 scripts/ParseArgs.py --ohe FALSE true $@)"
scale="$(python3 scripts/ParseArgs.py --scale FALSE none $@)"
impute="$(python3 scripts/ParseArgs.py --impute FALSE false $@)"
randomSeed="$(python3 scripts/ParseArgs.py --seed FALSE 0 $@)"
numCores="$(python3 scripts/ParseArgs.py --num-cores FALSE 1 $@)"
tmpDir="$(python3 scripts/ParseArgs.py --temp-dir FALSE '' $@)"

checkParamParseOutput "$dataFiles"
checkParamParseOutput "$description"
checkParamParseOutput "$numIterations"
checkParamParseOutput "$outerNumFolds"
checkParamParseOutput "$innerNumFolds"
checkParamParseOutput "$classifAlgos"
checkParamParseOutput "$verbose"
checkParamParseOutput "$ohe"
checkParamParseOutput "$scale"
checkParamParseOutput "$impute"
checkParamParseOutput "$randomSeed"
checkParamParseOutput "$numCores"
checkParamParseOutput "$tmpDir"

dataFiles="$(modifyDataFilePaths "$dataFiles")"

outputDir=/OutputData
checkOutputDir $outputDir

outPredictionsFile="$outputDir/Predictions.tsv"
outMetricsFile="$outputDir/Metrics.tsv"
outNestedPredictionsFile="$outputDir/Nested_Predictions.tsv"
outNestedMetricsFile="$outputDir/Nested_Metrics.tsv"
outNestedBenchmarkFile="$outputDir/Nested_ElapsedTime.tsv"
outNestedBestFile="$outputDir/Nested_Best.tsv"
outLogFile="$outputDir/Log.txt"

source scripts/print_args

function cleanup {
  rm -rf $tmpDir
}

cleanup
tmpDir="$(getTempDir "$tmpDir")"

trap cleanup INT TERM EXIT

validationType=crossvalidation
source scripts/setup

echo "Parsing data..." 2>&1 | timestamp | tee -a "$outLogFile"
analysisDataFile=$tmpDir/data.gz
java $(getJavaArgs) -jar shinylearner.jar RAW_DATA_FILES="$dataFiles" ANALYSIS_DATA_FILE="$analysisDataFile" DEBUG=$verbose IMPUTE=$impute TEMP_DIR=$tmpDir 2> /dev/null

if [[ "$impute" == "true" ]]
then
  echo "Imputing missing data (where applicable)..." 2>&1 | timestamp | tee -a "$outLogFile"
  Rscript --vanilla scripts/Impute.R "$analysisDataFile" $verbose 2>&1 | timestamp | tee -a "$outLogFile"
fi

if [[ "$scale" != "none" ]]
then
  echo "Scaling numerical data (where applicable)..." | timestamp | tee -a "$outLogFile"
  python3 scripts/Scale.py "$analysisDataFile" "$scale" $verbose 2>&1 | timestamp | tee -a "$outLogFile"
fi

if [[ "$ohe" == "true" ]]
then
  echo "One-hot encoding categorical data (where applicable)..." 2>&1 | timestamp | tee -a "$outLogFile"
  python3 scripts/OneHotEncode.py "$analysisDataFile" 2>&1 | timestamp | tee -a "$outLogFile"
fi

for iteration in $(seq 1 $numIterations)
do
  outDir=$tmpDir/$iteration
  mkdir -p $outDir

  if [[ "$outPredictionsFile" == "" ]]
  then
    outPredictionsFileIteration=
  else
    outPredictionsFileIteration=$outDir/outpreds
  fi
  if [[ "$outMetricsFile" == "" ]]
  then
    outMetricsFileIteration=
  else
    outMetricsFileIteration=$outDir/outmetrics
  fi
  if [[ "$outNestedPredictionsFile" == "" ]]
  then
    outNestedPredictionsFileIteration=
  else
    outNestedPredictionsFileIteration=$outDir/outpredsnested
  fi
  if [[ "$outNestedMetricsFile" == "" ]]
  then
    outNestedMetricsFileIteration=
  else
    outNestedMetricsFileIteration=$outDir/outmetricsnested
  fi
  if [[ "$outNestedBenchmarkFile" == "" ]]
  then
    outNestedBenchmarkFileIteration=
  else
    outNestedBenchmarkFileIteration=$outDir/outbenchnested
  fi

  outNestedBestFileIteration=$outDir/outnestedbest
  randomSeed2=$(($randomSeed + $iteration))

  echo 2>&1 | timestamp | tee -a "$outLogFile"
  echo "**************************************************************" | timestamp | tee -a "$outLogFile"
  echo "Beginning analysis for cross-validation fold ${iteration}" | timestamp | tee -a "$outLogFile"
  echo "**************************************************************" | timestamp | tee -a "$outLogFile"
  scripts/nestedclassification "$analysisDataFile" "$description" "$outerNumFolds" "$innerNumFolds" "$verbose" "$classifAlgos" "$outPredictionsFileIteration" "$outMetricsFileIteration" "$outNestedPredictionsFileIteration" "$outNestedMetricsFileIteration" "$outNestedBenchmarkFileIteration" "$outNestedBestFileIteration" crossvalidation $randomSeed2 NA $impute $outDir "$outLogFile" "$numCores"
done

echo 2>&1 | timestamp | tee -a "$outLogFile"
echo "**************************************************************" | timestamp | tee -a "$outLogFile"
echo "Finalizing analysis" | timestamp | tee -a "$outLogFile"
echo "**************************************************************" | timestamp | tee -a "$outLogFile"
echo 2>&1 | timestamp | tee -a "$outLogFile"

echo "Combining results across cross-validation iterations..." | timestamp | tee -a "$outLogFile"
python3 scripts/CombineCrossValidationIterations.py "$tmpDir/*/outpreds,$tmpDir/*/outmetrics,$tmpDir/*/outpredsnested,$tmpDir/*/outmetricsnested,$tmpDir/*/outbenchnested,$tmpDir/*/outnestedbest" "$tmpDir/outpreds,$tmpDir/outmetrics,$tmpDir/outnestedpreds,$tmpDir/outnestedmetrics,$tmpDir/outnestedbenchmark,$tmpDir/outnestedbest" 2>&1 | timestamp | tee -a "$outLogFile"

sortFile $tmpDir/outpreds "-k1,1 -k2,2n -k3,3n -k4" "$outPredictionsFile" 2>&1 | timestamp | tee -a "$outLogFile"
sortFile $tmpDir/outmetrics "-k1,1 -k2,2n -k3,3n -k4" "$outMetricsFile" 2>&1 | timestamp | tee -a "$outLogFile"
sortFile $tmpDir/outnestedpreds "-k1,1 -k2,2n -k3,3n -k4,4n -k5" "$outNestedPredictionsFile" 2>&1 | timestamp | tee -a "$outLogFile"
sortFile $tmpDir/outnestedmetrics "-k1,1 -k2,2n -k3,3n -k4,4n -k5" "$outNestedMetricsFile" 2>&1 | timestamp | tee -a "$outLogFile"
sortFile $tmpDir/outnestedbenchmark "-k1,1 -k2,2n -k3,3n -k4,4n -k5" "$outNestedBenchmarkFile" 2>&1 | timestamp | tee -a "$outLogFile"
sortFile $tmpDir/outnestedbest "-k1,1 -k2,2n -k3,3n -k4" "$outNestedBestFile" 2>&1 | timestamp | tee -a "$outLogFile"

cleanup

source scripts/success_message
