#!/bin/bash

set -euo pipefail

source scripts/shared_functions

analysisDataFile="$1"
description="$2"
outerNumIterations="$3"
innerNumIterations="$4"
verbose="$5"
classifAlgos="$6"
outPredictionsFile="$7"
outMetricsFile="$8"
outNestedPredictionsFile="${9}"
outNestedMetricsFile="${10}"
outNestedBenchmarkFile="${11}"
outNestedBestFile="${12}"
validationType="${13}"
randomSeed="${14}"
proportionTrain="${15}"
impute="${16}"
tmpDir="${17}"
outLogFile="${18}"
numCores="${19}"

source scripts/setup

python3 scripts/ExtractSampleInfo.py "$analysisDataFile" "$description" $tmpDir/allid $tmpDir/classes

if [[ "$validationType" == "montecarlo" ]]
then
  python3 scripts/AssignTrainingTesting.py $tmpDir/allid $tmpDir/classes "$iterationOutputHeader" $tmpDir/ott $outerNumIterations $randomSeed $proportionTrain
  python3 scripts/AssignTrainingTesting.py $tmpDir/ott $tmpDir/classes "Inner" $tmpDir/ie $innerNumIterations $randomSeed $proportionTrain
else
  python3 scripts/AssignCrossValidation.py $tmpDir/allid $tmpDir/classes "$iterationOutputHeader" $tmpDir/ott $outerNumIterations $randomSeed
  python3 scripts/AssignCrossValidation.py $tmpDir/ott $tmpDir/classes "Inner" $tmpDir/ie $innerNumIterations $randomSeed
fi

#if [[ "$verbose" == "true" ]]
#then
#  echo "allid:"
#  cat $tmpDir/allid
#
#  echo "classes:"
#  cat $tmpDir/classes
#
#  echo "ott:"
#  cat $tmpDir/ott
#
#  echo "ie:"
#  cat $tmpDir/ie
#fi

## Prepare inner experiment files
python3 scripts/AddAlgorithmScripts.py $tmpDir/ie "$classifAlgos" $tmpDir/ie2 $verbose

echo "Classifying for inner iterations..." | timestamp | tee -a "$outLogFile"
java $(getJavaArgs) -jar shinylearner.jar ANALYSIS_DATA_FILE=$analysisDataFile EXPERIMENT_FILE=$tmpDir/ie2 DEBUG=$verbose OUTPUT_BENCHMARK_FILE_PATH=$tmpDir/icb OUTPUT_PREDICTIONS_FILE_PATH=$tmpDir/ip NUM_CORES=$numCores TEMP_DIR=$tmpDir 2> /dev/null

echo "Calculating classification metrics for inner iterations..." | timestamp | tee -a "$outLogFile"
Rscript --vanilla scripts/CalculateClassificationMetrics.R "$tmpDir/ip" "$tmpDir/im"

echo "Parsing inner classification results..." | timestamp | tee -a "$outLogFile"
python3 scripts/ReformatInnerResults_Classification.py $tmpDir/im $tmpDir/ibrf

#if [[ "$verbose" == "true" ]]
#then
#  echo "ibrf:"
#  cat $tmpDir/ibrf
#fi

echo "Identifying best combination of algorithms..." | timestamp | tee -a "$outLogFile"
Rscript --vanilla scripts/SelectBestInnerResults_Classification.R $tmpDir/ibrf $tmpDir/ott $tmpDir/ocle $tmpDir/ibest 2> $errFile
printError $verbose $errFile

echo "Classifying for outer iterations..." | timestamp | tee -a "$outLogFile"
java $(getJavaArgs) -jar shinylearner.jar ANALYSIS_DATA_FILE=$analysisDataFile EXPERIMENT_FILE=$tmpDir/ocle DEBUG=$verbose OUTPUT_PREDICTIONS_FILE_PATH=$tmpDir/op NUM_CORES=$numCores TEMP_DIR=$tmpDir 2> /dev/null

echo "Calculating classification metrics for outer iterations..." | timestamp | tee -a "$outLogFile"
Rscript --vanilla scripts/CalculateClassificationMetrics.R "$tmpDir/op" "$tmpDir/om"

echo "Preparing output files..." | timestamp | tee -a "$outLogFile"

if [[ "$outPredictionsFile" != "" ]]
then
  python3 scripts/ParseNestedResults.py $tmpDir/op $iterationOutputHeader $tmpDir/op.sorttemp
  sortFile $tmpDir/op.sorttemp "-k1,1 -k2,2n -k3" "$outPredictionsFile"
fi
if [[ "$outMetricsFile" != "" ]]
then
  python3 scripts/ParseNestedResults.py $tmpDir/om $iterationOutputHeader $tmpDir/om.sorttemp
  sortFile $tmpDir/om.sorttemp "-k1,1 -k2,2n -k3" "$outMetricsFile"
fi

if [[ "$outNestedPredictionsFile" != "" ]]
then
  python3 scripts/ParseNestedResults2.py $tmpDir/ip $iterationOutputHeader $tmpDir/ip.sorttemp
  sortFile $tmpDir/ip.sorttemp "-k1,1 -k2,2n -k3,3n -k4" "$outNestedPredictionsFile"
fi
if [[ "$outNestedMetricsFile" != "" ]]
then
  python3 scripts/ParseNestedResults2.py $tmpDir/im $iterationOutputHeader $tmpDir/im.sorttemp
  sortFile $tmpDir/im.sorttemp "-k1,1 -k2,2n -k3,3n -k4" "$outNestedMetricsFile"
fi
if [[ "$outNestedBenchmarkFile" != "" ]]
then
  python3 scripts/ParseNestedResults2.py $tmpDir/icb $iterationOutputHeader $tmpDir/icb.sorttemp
  sortFile $tmpDir/icb.sorttemp "-k1,1 -k2,2n -k3,3n -k4" "$outNestedBenchmarkFile"
fi

python3 scripts/SplitDescriptionColumn.py $tmpDir/ibest $iterationOutputHeader $tmpDir/ibest.sorttemp
sortFile $tmpDir/ibest.sorttemp "-k1,1 -k2,2n -k3,3 -k4" "$outNestedBestFile"
